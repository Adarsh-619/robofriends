{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundry.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","id","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","ErrorBoundry","props","state","hasError","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onSearchChnage","event","target","value","fetch","then","response","json","users","filteredRobots","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAeeA,EAbF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,GAAIC,EAAS,EAATA,MAExB,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BJ,EAA1B,cACpB,6BACC,4BAAKD,GACL,2BAAIE,MCaOI,EAlBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,OACnB,OACA,6BAEAA,EAAOC,KAAI,SAACC,EAAMC,GACf,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLT,GAAIM,EAAOG,GAAGT,GACdD,KAAMO,EAAOG,GAAGV,KAChBE,MAAOK,EAAOG,GAAGR,aCGPU,EAfG,SAAC,GAA+B,EAA9BC,YAA+B,IAAjBC,EAAgB,EAAhBA,aACjC,OACC,yBAAKX,UAAU,UACd,2BACCA,UAAU,oCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCgBCI,G,wDArBd,WAAYC,GAAO,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACZC,UAAU,GAHM,E,8DAOAC,EAAOC,GACxBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACP,6DAEDG,KAAKL,MAAMO,a,GAhBOC,cCQZC,EARA,SAACT,GACf,OACC,yBAAKU,MAAO,CAAEC,UAAY,SAAUC,OAAS,kBAAoBC,OAAO,UACtEb,EAAMO,WC4CKO,E,kDAzCd,aAAc,IAAD,8BACZ,gBAeFC,eAAiB,SAACC,GACjB,EAAKV,SAAS,CAACZ,YAAcsB,EAAMC,OAAOC,SAfzC,EAAKjB,MAAQ,CACXb,OAAS,GACTM,YAAa,IAJH,E,gEAQb,IAAD,OACCyB,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKjB,SAAS,CAAClB,OAASmC,S,+BAQjC,IAAD,EACwBlB,KAAKJ,MAA5Bb,EADD,EACCA,OAAQM,EADT,EACSA,YACT8B,EAAiBpC,EAAOqC,QAAO,SAAArC,GACrC,OAAOA,EAAOP,KAAK6C,cAAcC,SAASjC,EAAYgC,kBAEvD,OAAQtC,EAAOwC,OAGb,yBAAK5C,UAAU,MACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWW,aAAcU,KAAKU,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU3B,OAAQoC,OAPrB,2C,GA1BchB,aCIEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACL0C,QAAQ1C,MAAMA,EAAM2C,a","file":"static/js/main.622c3db9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, id, email})=>{\r\n\t// const {name, id, email} = props; Another way of doing this\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5\">\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\t\t\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots })=>{\r\n\treturn (\r\n\t<div>\r\n\t{\r\n\trobots.map((user, i) =>{\r\n\t\t \treturn(\r\n\t\t \t\t<Card \r\n\t\t\t\t\tkey={i} \r\n\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\temail={robots[i].email}\r\n\t\t\t\t/>\r\n\t\t\t);\r\n\t\t })\r\n\t}\r\n\t</div>\t\r\n\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield , searchChange})=>{\r\n\treturn (\r\n\t\t<div className=\"tc pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName=\"pa2 ba b--green bg-lightest-blue \"\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='Search Robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\r\n\t\t</div>\r\n\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError :false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({hasError : true})\r\n\t}\r\n\r\n\trender(){\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1> Ooooops... This is not Good.</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ErrorBoundry;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn (\r\n\t\t<div style={{ overflowY : 'scroll', border : '1px solid black' , height:'500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox'\r\nimport './App.css'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport Scroll from '../components/Scroll'\r\n\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\t\trobots : [],\r\n\t\t\t\tsearchfield :'',\r\n\t\t} \r\n\t}\r\ncomponentDidMount()\r\n{\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users => this.setState({robots : users}))\r\n}\r\n\r\n\r\n\r\nonSearchChnage = (event) => {\r\n\tthis.setState({searchfield : event.target.value });\r\n}\r\n\trender(){\r\n\t\tconst { robots, searchfield} = this.state;\r\n\t\t\tconst filteredRobots = robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\treturn !robots.length ?\r\n\t\t\t <h1>Loading</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className=\"tc\">\r\n\t\t\t\t\t<h1 className='f1'> RoboFriend </h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChnage}/>\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t\r\n\t}\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t\t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}